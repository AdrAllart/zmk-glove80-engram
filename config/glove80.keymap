/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include "keys_fr_belgian.h"


#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 74 73 72>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 57 58 59 60 61 62 63 73 74 75 76 77 78 79 72 55 56 54 71 70 69 52 53>;
        };

        thumb_layers: thumb_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYERS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            retro-tap;
        };

        dot_excl: dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCL";
            bindings = <&kp FR_DOT>, <&kp FR_EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semicol_col: semicol_col {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMICOL_COL";
            bindings = <&kp FR_SEMI>, <&kp FR_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_quest: slash_quest {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_QUEST";
            bindings = <&kp FR_SLASH>, <&kp FR_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quote_doubleq: quote_doubleq {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_DOUBLEQ";
            bindings = <&kp FR_SINGLE_QUOTE>, <&kp FR_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_unders: minus_unders {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_UNDERS";
            bindings = <&kp FR_MINUS>, <&kp FR_UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        type_dead: type_dead {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp SPACE>;
            label = "TYPE_DEAD";
        };

        caret_voyel: caret_voyel {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp FR_CARET &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "CARET_VOYEL";
        };
    };


// ==== MOUSE-KEY <section param> ===== (from https://github.com/sunaku/glove80-keymaps)


#define MOUSE_SCROLL_UP    SCRL_UP
#define MOUSE_SCROLL_DOWN  SCRL_DOWN
#define MOUSE_SCROLL_LEFT  SCRL_LEFT
#define MOUSE_SCROLL_RIGHT SCRL_RIGHT


//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif

//
// MOUSE_SCALER_FINE sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_FINE
#define MOUSE_SCALER_FINE 1 16
#endif

//
// MOUSE_SCALER_SLOW sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_SLOW
#define MOUSE_SCALER_SLOW 1 4
#endif

//
// MOUSE_SCALER_FAST sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_FAST
#define MOUSE_SCALER_FAST 4 1
#endif

//
// MOUSE_SCALER_WARP sets parameters for the &zip_xy_scaler input processor:
// https://zmk.dev/docs/keymaps/input-processors/scaler
//
#ifndef MOUSE_SCALER_WARP
#define MOUSE_SCALER_WARP 12 1
#endif
/*HACK*/};

// ==== MOUSE-KEY <section begins> ====
#define ZMK_POINTING_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_POINTING_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/pointing.h>
&mmv {
delay-ms = <MOUSE_MOTION_DELAY>;
acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
delay-ms = <MOUSE_SCROLL_DELAY>;
acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};
//
// Scaling for mouse movement, based on @caksoylar's example:
// https://github.com/caksoylar/zmk-config/commit/0020c23c544cd7111013f0114609d1fb90e0e475
//
#include <input/processors.dtsi>
&mmv_input_listener {
#ifdef LAYER_MOUSE
fine {
    layers = <LAYER_MOUSE>;
    input-processors = <&zip_xy_scaler MOUSE_SCALER_FINE>;
};
#endif
#ifdef LAYER_MOUSE_SLOW
slow {
    layers = <LAYER_MOUSE_SLOW>;
    input-processors = <&zip_xy_scaler MOUSE_SCALER_SLOW>;
};
#endif
#ifdef LAYER_MOUSE_FAST
fast {
    layers = <LAYER_MOUSE_FAST>;
    input-processors = <&zip_xy_scaler MOUSE_SCALER_FAST>;
};
#endif
#ifdef LAYER_MOUSE_WARP
warp {
    layers = <LAYER_MOUSE_WARP>;
    input-processors = <&zip_xy_scaler MOUSE_SCALER_WARP>;
};
#endif
};
//
// Scaling for mouse scrolling, based on @caksoylar's example:
// https://github.com/caksoylar/zmk-config/commit/e35ee2f08788927683df7bbdd7fc73434473886e
//
#include <zephyr/dt-bindings/input/input-event-codes.h>
/ {
input_processors {
    zip_scroll_scaling_processor: zip_scroll_scaling_processor {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
    track-remainders;
    };
};
};
&msc_input_listener {
#ifdef LAYER_MOUSEFine
fine {
    layers = <LAYER_MOUSEFine>;
    input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_FINE>;
};
#endif
#ifdef LAYER_MOUSE_SLOW
slow {
    layers = <LAYER_MOUSE_SLOW>;
    input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_SLOW>;
};
#endif
#ifdef LAYER_MOUSE_FAST
fast {
    layers = <LAYER_MOUSE_FAST>;
    input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_FAST>;
};
#endif
#ifdef LAYER_MOUSE_WARP
warp {
    layers = <LAYER_MOUSE_WARP>;
    input-processors = <&zip_scroll_scaling_processor MOUSE_SCALER_WARP>;
};
#endif
};
// ==== MOUSE-KEY <section ends> =====

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2              &kp F3              &kp F4           &kp F5                                                                                                                                                            &kp F6           &kp F7           &kp F8              &kp F9               &kp F10
&kp EQUAL   &kp N1              &kp N2              &kp N3           &kp N4                &kp N5                                                                                                                        &kp N6        &kp N7           &kp N8           &kp N9              &kp N0               &kp MINUS
&kp TAB     &kp FR_B            &kp FR_Y            &kp FR_O         &kp FR_U              &quote_doubleq                                                                                                                &semicol_col  &kp FR_L         &kp FR_D         &kp FR_W            &kp FR_V             &kp FR_Z
&kp FR_X    &hml LEFT_WIN FR_C  &hml LEFT_ALT FR_I  &hml LCTRL FR_E  &hml LEFT_SHIFT FR_A  &kp FR_COMMA                                                                                                                  &dot_excl     &hmr RSHFT FR_H  &hmr RCTRL FR_T  &hmr LEFT_ALT FR_S  &hmr RIGHT_WIN FR_N  &kp FR_Q
&kp GRAVE   &kp FR_G            &sl 4               &kp FR_J         &kp FR_K              &minus_unders   &kp ESCAPE                 &kp K_CALC              &kp PRINTSCREEN  &kp LGUI  &to 7    &kp RET                &slash_quest  &kp FR_R         &kp FR_M         &kp FR_F            &kp FR_P             &kp PG_UP
&magic 5 0  &kp HOME            &kp END             &kp LEFT         &kp RIGHT                             &thumb_layers 2 BACKSPACE  &thumb_layers 3 DELETE  &kp LALT         &kp RALT  &kp TAB  &thumb_layers 1 SPACE                &kp UP           &kp DOWN         &kp LBKT            &kp RBKT             &kp PG_DN
            >;
        };

        symbols {
            bindings = <
&trans  &trans               &trans                   &trans                &trans                                                                                                &trans              &trans            &trans               &trans       &trans
&trans  &trans               &trans                   &trans                &trans              &trans                                                          &trans            &trans              &trans            &trans               &trans       &trans
&trans  &type_dead FR_CARET  &kp FR_LESS_THAN         &kp FR_GREATER_THAN   &kp FR_DOLLAR       &kp FR_PERCENT                                                  &kp FR_AT         &kp FR_AMPERSAND    &kp FR_STAR       &type_dead FR_GRAVE  &kp FR_SQT   &trans
&trans  &kp FR_LEFT_BRACE    &kp FR_LEFT_PARENTHESIS  &kp FR_RPAR           &kp FR_RIGHT_BRACE  &kp FR_EQUAL                                                    &kp FR_BACKSLASH  &kp FR_PLUS         &kp FR_MINUS      &kp FR_SLASH         &kp FR_DQT   &trans
&trans  &type_dead FR_TILDE  &kp FR_LEFT_BRACKET      &kp FR_RIGHT_BRACKET  &kp FR_UNDER        &kp FR_HASH     &trans  &trans  &trans  &trans  &trans  &trans  &kp FR_PIPE       &kp FR_EXCLAMATION  &kp FR_SEMICOLON  &kp FR_COLON         &kp FR_EURO  &trans
&trans  &trans               &trans                   &trans                &trans                              &trans  &trans  &trans  &trans  &trans  &trans                    &trans              &trans            &trans               &trans       &trans
            >;
        };

        nav {
            bindings = <
&trans        &trans        &trans        &trans        &trans                                                                                &trans          &trans        &trans          &trans     &trans
&trans        &trans        &trans        &trans        &trans          &trans                                                        &trans  &trans          &trans        &trans          &trans     &trans
&trans        &trans        &trans        &kp LC(FR_A)  &kp LC(FR_Z)    &kp LC(FR_Y)                                                  &trans  &kp LS(TAB)     &kp LC(FR_Z)  &kp LC(FR_Y)    &kp TAB    &trans
&trans        &trans        &kp LEFT_ALT  &kp LCTRL     &kp LEFT_SHIFT  &kp LC(FR_F)                                                  &trans  &kp LEFT_ARROW  &kp UP        &kp DOWN_ARROW  &kp RIGHT  &trans
&kp LC(FR_L)  &kp LG(FR_V)  &kp LC(FR_X)  &kp LC(FR_C)  &kp LC(FR_V)    &none         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME        &kp PAGE_UP   &kp PAGE_DOWN   &kp END    &trans
&trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans        &trans          &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none     &kp HOME                                                  &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &kp F7      &kp F8      &kp F9    &kp F10                                                   &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp F4      &kp F5      &kp F6    &kp F11                                                   &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &kp F1      &kp F2      &kp F3    &kp F12   &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12             &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        accent {
            bindings = <
&trans  &trans            &trans             &trans             &trans                                                                                         &trans        &trans            &trans  &trans  &trans
&trans  &trans            &trans             &trans             &trans             &trans                                                              &trans  &trans        &trans            &trans  &trans  &trans
&trans  &trans            &trans             &caret_voyel FR_O  &caret_voyel FR_U  &kp FR_U_GRAVE                                                      &trans  &trans        &trans            &trans  &trans  &trans
&trans  &trans            &caret_voyel FR_I  &caret_voyel FR_E  &caret_voyel FR_A  &kp FR_A_GRAVE                                                      &trans  &kp FR_CARET  &kp LS(FR_CARET)  &trans  &trans  &trans
&trans  &kp FR_C_CEDILLA  &kp FR_CARET       &kp FR_E_ACUTE     &kp FR_E_GRAVE     &trans          &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans            &trans  &trans  &trans
&trans  &trans            &trans             &trans             &trans                             &trans  &trans  &trans  &trans  &trans  &kp FR_SQT          &trans        &trans            &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 6
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans          &trans          &trans                                                                                       &trans      &trans     &trans        &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans                                                        &trans        &trans      &trans     &trans        &trans  &trans
&trans  &trans  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &trans                                                        &kp LC(FR_V)  &kp RSHIFT  &kp RCTRL  &kp LEFT_ALT  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans                                                        &kp LC(FR_C)  &mo 8       &mo 9      &mo 10        &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans  &mkp MCLK  &trans     &trans  &trans  &to 0   &trans  &trans        &trans      &trans     &trans        &trans  &trans
&trans  &trans  &trans          &trans          &trans                   &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans                &trans      &trans     &trans        &trans  &trans
            >;
        };

        mouse_slow {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse_fast {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse_warp {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
